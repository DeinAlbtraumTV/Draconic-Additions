buildscript {
	repositories {
		mavenLocal()
		jcenter()
		maven {
			name = 'forge'
			url = "http://maven.minecraftforge.net/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
	}
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven'

repositories {
    mavenLocal()
    maven { url = "http://chickenbones.net/maven" }
    maven { url = "https://dvs1.progwml6.com/files/maven" }
    maven { url = "http://maven.cil.li/" }
    maven { url = "https://maven.theillusivec4.top/" }
}

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
	// Load config.  It shall from now be referenced as simply config or project.config
	def prop = new Properties()
	prop.load(it)
	project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mc_version}-${config.mod_version}"
group = "net.foxmcloud.draconicadditions"
archivesBaseName = "Draconic-Additions"

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

minecraft {
    mappings channel: 'official', version: config.mc_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory file('run')
            mods { draconicadditions { source sourceSets.main } }
        }
        server {
            workingDirectory file('run')
            mods { draconicadditions { source sourceSets.main } }
        }
        data {
            workingDirectory file('run')
            args '--mod', 'draconicadditions', '--all', '--output', file("src/generated/resources")
            mods { draconicadditions { source sourceSets.main } }
        }
    }
}

String buildNo = config.buildNo
if (System.getenv("BUILD_NUMBER") != null) {
	buildNo = System.getenv("BUILD_NUMBER")
}
version = version + ".${buildNo}"

dependencies {
	minecraft "net.minecraftforge:forge:${config.mc_version}-${config.forge_version}"
	compile "com.brandon3055.brandonscore:BrandonsCore:${config.mc_version}-${config.bcore_version}:deobf"
	//compile "com.brandon3055.projectintelligence:ProjectIntelligence:${config.mc_version}-${config.pi_version}:deobf"
	compile "com.brandon3055.draconicevolution:Draconic-Evolution:${config.mc_version}-${config.de_version}:deobf"
	compile fg.deobf("top.theillusivec4.curios:curios-forge:${config.mc_version}-${config.curios_version}")
}

processResources { task ->
    inputs.property 'mod_version', config.mod_version
    inputs.property 'mc_version', config.mc_version

    from(sourceSets.main.resources.srcDirs) { spec ->
        spec.include 'META-INF/mods.toml'
        task.doFirst {
            spec.expand 'version': config.mod_version, 'mc_version': config.mc_version
        }
    }
}

jar {
    finalizedBy 'reobfJar'
    classifier = 'universal'
    from file("LICENSE")
    manifest {
        attributes 'Specification-Title': archivesBaseName
        attributes 'Specification-Vendor': 'FoxMcloud5655'
        attributes 'Specification-Version': "1"
        attributes 'Implementation-Title': archivesBaseName
        attributes 'Implementation-Vendor': 'FoxMcloud5655'
        attributes 'Implementation-Version': version
        attributes 'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    }
}

task srcJar(type: Jar) {
    build.dependsOn it
    from sourceSets.main.allSource
    classifier = 'sources'
    from file("LICENSE")
}

def resolve(module, chop = true, configuration = 'compile', errorMissing = true) {
    //Copy and lenient resolve the configuration, Forge cant be resolved at this time so lenient is required.
    def filtered = configurations.getByName(configuration).copy().incoming.artifactView({ it.lenient = true }).artifacts
            .findAll { it.id.componentIdentifier.module == module }
            .collect { it.id.componentIdentifier.version }
    if (filtered.size() > 1) {
        println "WARNING: Found ${filtered.size()} Dependencies with ModuleName '${module}' in configuration '${configuration.name}'"
    }
    if (errorMissing && filtered.isEmpty()) {
        throw new RuntimeException("Failed resolve dependency version for '${module}'")
    }
    if (filtered.isEmpty()) return "0"
    def version = filtered.first() as String
    if (chop) {
        def idx = version.lastIndexOf('-')
        return version.substring(idx + 1)
    }
    return version
}
